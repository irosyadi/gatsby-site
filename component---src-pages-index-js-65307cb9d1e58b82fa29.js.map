{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["Wrapper","_styled2","target","name","styles","_ref","data","location","posts","allMarkdownRemark","edges","countOfInitialPost","site","siteMetadata","configs","_useCount","useCount","count","countRef","increaseCount","bottomRef","useRef","_useState","useState","tag","filteredPosts","state","setState","tags","useMemo","result","map","_ref2","node","concat","_toConsumableArray","frontmatter","i","length","j","splice","setFilteredPosts","useCallback","undefined","filter","post","includes","useInfiniteScroll","current","useEffect","href","queryString","parseUrl","query","___EmotionJSX","Layout","SEO","title","Profile","CategoryMenu","TagSelector","onTagClick","navigate","slice","index","Post","key","ref"],"mappings":"wRAaMA,EAAOC,YAAA,OAAAC,OAAA,WAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,mEAEE,mBAAAC,GAAyB,IAAtBC,EAAID,EAAJC,KAAMC,EAAQF,EAARE,SAChBC,EAAQF,EAAKG,kBAAkBC,MAC7BC,EAAuBL,EAAKM,KAAKC,aAAaC,QAA9CH,mBAAkBI,EACeC,YAAS,SAA3CC,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAAEI,EAAaJ,EAAA,GAC/BK,EAAYC,mBAAQC,EAEAC,mBAAS,CACjCC,IAAK,MACLC,cAAejB,IAFVkB,EAAKJ,EAAA,GAAEK,EAAQL,EAAA,GAKhBM,EAAOC,mBAAQ,WACnB,IAAIC,EAAS,GACbtB,EAAMuB,KAAI,SAAAC,GAAA,IAAGC,EAAID,EAAJC,KAAI,OAAQH,EAAM,GAAAI,OAAAC,YAAOL,GAAMK,YAAKF,EAAKG,YAAYR,UAClE,IAAK,IAAIS,EAAI,EAAGA,EAAIP,EAAOQ,SAAUD,EACnC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIT,EAAOQ,SAAUC,EACnCT,EAAOO,KAAOP,EAAOS,IAAIT,EAAOU,OAAOD,IAAK,GAGpD,OAAOT,IACN,CAACtB,IAEEiC,EAAmBC,uBACvB,SAAClB,QACamB,IAARnB,IAAmBA,EAAME,EAAMF,KAEjCG,EADU,QAARH,EACO,CACPA,IAAKA,EACLC,cAAejB,GAGR,CACPgB,IAAKA,EACLC,cAAejB,EAAMoC,QAAO,SAACC,GAAI,OAC/BA,EAAKZ,KAAKG,YAAYR,KAAKkB,SAAStB,UAK5C,CAAChB,EAAOkB,EAAMF,MAGhBuB,aAAkB,WACZvC,EAAM8B,OAASpB,EAAS8B,QAAUrC,IACpCQ,IACAsB,OAEDrB,GAkBH,OAXA6B,qBAAU,WACR,GAAI1C,EAAS2C,KAAM,CAAC,IAEP1B,EACP2B,IAAYC,SAAS7C,EAAS2C,MADhCG,MAAS7B,IAEPA,GACFiB,EAAiBjB,MAGpB,CAACjB,EAAS2C,KAAMT,IAGjBa,YAACC,IAAM,KACLD,YAACE,IAAG,CAACC,MAAM,SACXH,YAACtD,EAAO,KACNsD,YAACI,IAAO,OAEVJ,YAACK,IAAY,MACbL,YAACtD,EAAO,KACNsD,YAACM,IAAW,CAAChC,KAAMA,EAAMiC,WAxBZ,SAACrC,GAClBsC,mBAAS,QAAQtC,GACjBiB,EAAiBjB,IAsBoCE,MAAOA,IACvDA,EAAMD,cACJsC,MAAM,EAAG9C,EAAQN,GACjBoB,KAAI,SAACc,EAAMmB,GACV,OAAOV,YAACW,IAAI,CAACpB,KAAMA,EAAMqB,IAAG,QAAUF,QAG5CV,YAAA,OAAKa,IAAK/C","file":"component---src-pages-index-js-65307cb9d1e58b82fa29.js","sourcesContent":["import tw from \"twin.macro\"\nimport React, { useMemo, useState, useEffect, useCallback, useRef } from \"react\"\nimport SEO from \"../components/seo\"\nimport Profile from \"../components/Profile\"\nimport Post from \"../components/Post\"\nimport Layout from \"../components/Layout\"\nimport { graphql, navigate } from \"gatsby\"\nimport queryString from \"query-string\"\nimport TagSelector from \"../components/TagSelector\"\nimport useInfiniteScroll from \"../lib/hooks/useInfiniteScroll\"\nimport useCount from \"../lib/hooks/useCount\"\nimport CategoryMenu from \"../components/CategoryMenu\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges\n  const { countOfInitialPost } = data.site.siteMetadata.configs\n  const [count, countRef, increaseCount] = useCount(\"index\")\n  const bottomRef = useRef()\n\n  const [state, setState] = useState({\n    tag: \"ALL\",\n    filteredPosts: posts,\n  })\n\n  const tags = useMemo(() => {\n    var result = []\n    posts.map(({ node }) => (result = [...result, ...node.frontmatter.tags]))\n    for (var i = 0; i < result.length; ++i) {\n      for (var j = i + 1; j < result.length; ++j) {\n        if (result[i] === result[j]) result.splice(j--, 1)\n      }\n    }\n    return result\n  }, [posts])\n\n  const setFilteredPosts = useCallback(\n    (tag) => {\n      if (tag === undefined) tag = state.tag\n      if (tag === \"ALL\") {\n        setState({\n          tag: tag,\n          filteredPosts: posts,\n        })\n      } else {\n        setState({\n          tag: tag,\n          filteredPosts: posts.filter((post) =>\n            post.node.frontmatter.tags.includes(tag)\n          ),\n        })\n      }\n    },\n    [posts, state.tag]\n  )\n\n  useInfiniteScroll(() => {\n    if (posts.length > countRef.current * countOfInitialPost) {\n      increaseCount()\n      setFilteredPosts()\n    }\n  }, bottomRef)\n\n  const onTagClick = (tag) => {\n    navigate(`?tag=${tag}`)\n    setFilteredPosts(tag)\n  }\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { tag },\n      } = queryString.parseUrl(location.href)\n      if (tag) {\n        setFilteredPosts(tag)\n      }\n    }\n  }, [location.href, setFilteredPosts])\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Wrapper>\n        <Profile />\n      </Wrapper>\n      <CategoryMenu />\n      <Wrapper>\n        <TagSelector tags={tags} onTagClick={onTagClick} state={state} />\n        {state.filteredPosts\n          .slice(0, count * countOfInitialPost)\n          .map((post, index) => {\n            return <Post post={post} key={`post_${index}`} />\n          })}\n      </Wrapper>\n      <div ref={bottomRef} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query PostsQuery {\n    site {\n      siteMetadata {\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"ddd, MMM D, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}