{"version":3,"sources":["webpack:///./src/components/Tag.js","webpack:///./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/Search.js","webpack:///./src/pages/search.js","webpack:///./src/components/Divider.js","webpack:///./src/components/Tags.js"],"names":["Tag","_ref","onClick","tag","selectedTag","scrollToCenter","isDarkMode","useContext","ThemeContext","tabRef","useRef","handleClick","useCallback","useEffect","___EmotionJSX","ref","css","darkModeColor","textColor1","whiteModeColor","_taggedTemplateLiteralLoose","e","t","slice","raw","_ref2","name","styles","_ref3","_ref4","_ref5","Search","value","onChange","location","React","Fragment","AiOutlineSearch","placeholder","onKeyPress","key","target","blur","onBlur","_queryString$parseUrl2","queryString","parseUrl","href","query","trim","navigate","Divider","color","Wrapper","_styled2","data","posts","allMarkdownRemark","edges","_useState","useState","filteredData","tags","state","setState","searchPost","filter","post","searchQuery","toLowerCase","_post$node2","node","excerpt","_post$node2$frontmatt","frontmatter","title","includes","tagsData","result","map","concat","_toConsumableArray","i","length","j","splice","searchTags","Layout","SEO","Object","assign","TagSelector","onTagClick","prev","_post$node","_post$node$frontmatte","index","Post","vertical","margin","fat","_css2","mainColor1","mainColor2","mainColor3","Tags"],"mappings":"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","file":"component---src-pages-search-js-6b1feecbf5f9d3607c85.js","sourcesContent":["import React, { useContext, useRef, useEffect, useCallback } from \"react\"\nimport tw, { css } from \"twin.macro\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\n\nconst Tag = ({ onClick, tag, selectedTag, scrollToCenter }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  const tabRef = useRef(null)\n\n  const handleClick = useCallback(() => {\n    if (scrollToCenter) scrollToCenter(tabRef)\n    if (onClick) onClick(tag)\n  }, [scrollToCenter, onClick, tabRef, tag])\n\n  useEffect(() => {\n    if (selectedTag === tag && scrollToCenter) {\n      scrollToCenter(tabRef)\n    }\n  }, [scrollToCenter, selectedTag, tabRef, tag])\n\n  return (\n    <button\n      ref={tabRef}\n      css={css`\n        white-space: nowrap;\n        transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        ${tw`text-base font-bold rounded-full mr-2 my-1 py-1 px-3`}\n        ${selectedTag === tag ? \"color\" : \"background-color\"}:\n        ${isDarkMode ? `#2d3748` : `#edf2f7`};\n        ${selectedTag === tag ? `background-color` : `color`}: ${isDarkMode\n          ? darkModeColor.textColor1\n          : whiteModeColor.textColor1};\n      `}\n      onClick={handleClick}\n    >\n      {tag}\n    </button>\n  )\n}\n\nexport default Tag\n","function _taggedTemplateLiteralLoose(e, t) {\n  return t || (t = e.slice(0)), e.raw = t, e;\n}\nexport { _taggedTemplateLiteralLoose as default };","import React from \"react\"\nimport tw from \"twin.macro\"\nimport queryString from \"query-string\"\nimport { AiOutlineSearch } from \"react-icons/ai\"\nimport Divider from \"./Divider\"\nimport { navigate } from \"gatsby\"\n\nconst Search = ({ value, onChange, location }) => {\n  const handlePress = (e) => {\n    if (e.key === \"Enter\") {\n      e.target.blur()\n    }\n  }\n\n  const handleBlur = (e) => {\n    const {\n      query: { query, tag },\n    } = queryString.parseUrl(location.href)\n    if (query !== value.trim())\n      if (tag && tag !== \"ALL\") {\n        navigate(`?query=${value.trim()}&tag=${tag}`)\n      } else {\n        navigate(`?query=${value.trim()}`)\n      }\n  }\n\n  return (\n    <>\n      <div css={tw`my-4 p-4 w-full`}>\n        <div css={tw`flex mb-2`}>\n          <AiOutlineSearch css={tw`text-gray-500 my-auto w-8 h-8`} />\n          <input\n            css={tw`appearance-none focus:outline-none w-full ml-2 bg-transparent placeholder-gray-600`}\n            placeholder={\"search\"}\n            value={value}\n            onChange={onChange}\n            onKeyPress={handlePress}\n            onBlur={handleBlur}\n          />\n        </div>\n        <Divider color />\n      </div>\n    </>\n  )\n}\n\nexport default Search\n","import React, { useState, useEffect, useCallback } from \"react\"\nimport tw from \"twin.macro\"\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/Layout\"\nimport { graphql } from \"gatsby\"\nimport queryString from \"query-string\"\nimport Search from \"../components/Search\"\nimport Post from \"../components/Post\"\nimport TagSelector from \"../components/TagSelector\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges ? data.allMarkdownRemark.edges : []\n\n  const [state, setState] = useState({\n    query: \"\",\n    tag: \"ALL\",\n    filteredData: [],\n    tags: [],\n  })\n\n  const onTagClick = (tag) => {\n    setState((prev) => {\n      const filteredData = prev.filteredData.filter((post) => {\n        const {\n          excerpt,\n          frontmatter: { title, tags },\n        } = post.node\n        if (tags.includes(tag)) return (excerpt && excerpt) || (title && title)\n        return []\n      })\n      return {\n        ...prev,\n        tag: tag,\n        filteredData: filteredData,\n      }\n    })\n  }\n\n  const handleChange = (query) => {\n    if (query.trim() === state.query.trim()) {\n      setState({\n        ...state,\n        query,\n      })\n      return\n    }\n    searchPost(query, \"ALL\")\n  }\n\n  const searchPost = useCallback(\n    (query, tag) => {\n      if (query.trim() === \"\") {\n        setState({\n          query,\n          tag,\n          filteredData: [],\n          tags: [],\n        })\n        return\n      }\n\n      const filteredData = posts.filter((post) => {\n        const searchQuery = query.toLowerCase().trim()\n        const {\n          excerpt,\n          frontmatter: { title, tags },\n        } = post.node\n        return (\n          (excerpt && excerpt.toLowerCase().includes(searchQuery)) ||\n          (title && title.toLowerCase().includes(searchQuery)) ||\n          (tags && tags.includes(searchQuery))\n        )\n      })\n\n      const searchTags = (filteredData) => {\n        var result = []\n        filteredData.map(\n          ({ node }) => (result = [...result, ...node.frontmatter.tags])\n        )\n        for (var i = 0; i < result.length; ++i) {\n          for (var j = i + 1; j < result.length; ++j) {\n            if (result[i] === result[j]) result.splice(j--, 1)\n          }\n        }\n        return result\n      }\n\n      setState(() => {\n        const tagsData = searchTags(filteredData)\n        return {\n          tag: tag,\n          query: query,\n          filteredData: filteredData,\n          tags: tagsData,\n        }\n      })\n    },\n    [posts]\n  )\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { query, tag },\n      } = queryString.parseUrl(location.href)\n      searchPost(query ? query : \"\", tag ? tag : \"ALL\")\n    }\n  }, [searchPost, location.href])\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <Wrapper>\n        <Search\n          value={state.query}\n          onChange={(e) => handleChange(e.target.value)}\n          location={location}\n        />\n        <TagSelector tags={state.tags} onTagClick={onTagClick} state={state} />\n        {state.filteredData.map((post, index) => (\n          <Post post={post} key={`post_${index}`} />\n        ))}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"ddd, MMM D, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from \"react\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\nimport tw, { css } from \"twin.macro\"\n\nconst Divider = ({ vertical, color, margin, fat }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  return (\n    <>\n      <div\n        css={\n          vertical\n            ? [tw`h-full flex justify-center`, margin && tw`my-2`]\n            : [tw`flex justify-center`, margin && tw`mx-2`]\n        }\n      >\n        <div\n          css={[\n            tw`rounded-full`,\n            fat\n              ? vertical\n                ? tw`h-full w-1 my-auto`\n                : tw`w-full h-1`\n              : vertical\n              ? tw`h-full w-px my-auto`\n              : tw`w-full h-px`,\n            isDarkMode ? tw`bg-gray-800` : tw`bg-gray-100`,\n            color &&\n              css`\n                background: linear-gradient(\n                  ${vertical ? \"180\" : \"270\"}deg,\n                  ${isDarkMode\n                    ? darkModeColor.mainColor1 +\n                      \",\" +\n                      darkModeColor.mainColor2 +\n                      \",\" +\n                      darkModeColor.mainColor3\n                    : whiteModeColor.mainColor1 +\n                      \",\" +\n                      whiteModeColor.mainColor2 +\n                      \",\" +\n                      whiteModeColor.mainColor3}\n                );\n              `,\n          ]}\n        ></div>\n      </div>\n    </>\n  )\n}\n\nexport default Divider\n","import React from \"react\"\nimport Tag from \"./Tag\"\n\nconst Tags = ({ tags, onClick, tag: selectedTag, scrollToCenter }) => {\n  return tags.map((tag, index) => (\n    <Tag\n      tag={tag}\n      selectedTag={selectedTag}\n      scrollToCenter={scrollToCenter}\n      key={`tag_${index}`}\n      onClick={onClick}\n    />\n  ))\n}\n\nexport default Tags\n"],"sourceRoot":""}