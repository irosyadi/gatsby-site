{"version":3,"sources":["webpack:///./src/components/Tag.js","webpack:///./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/Search.js","webpack:///./src/pages/search.js","webpack:///./src/components/Divider.js","webpack:///./src/components/Tags.js"],"names":["Tag","onClick","tag","selectedTag","scrollToCenter","isDarkMode","useContext","ThemeContext","tabRef","useRef","handleClick","useCallback","useEffect","ref","css","darkModeColor","textColor1","whiteModeColor","_taggedTemplateLiteralLoose","strings","raw","slice","Search","value","onChange","location","placeholder","onKeyPress","e","key","target","blur","onBlur","queryString","parseUrl","href","query","trim","navigate","Divider","color","Wrapper","data","posts","allMarkdownRemark","edges","useState","filteredData","tags","state","setState","searchPost","filter","post","searchQuery","toLowerCase","node","excerpt","frontmatter","title","includes","tagsData","result","map","i","length","j","splice","searchTags","Layout","TagSelector","onTagClick","prev","index","Post","vertical","margin","fat","mainColor1","mainColor2","mainColor3","Tags"],"mappings":"kJAwCeA,IAnCH,SAAH,GAAuD,IAAjDC,EAAO,EAAPA,QAASC,EAAG,EAAHA,IAAKC,EAAW,EAAXA,YAAaC,EAAc,EAAdA,eAChCC,EAAeC,qBAAWC,KAA1BF,WACFG,EAASC,iBAAO,MAEhBC,EAAcC,uBAAY,WAC1BP,GAAgBA,EAAeI,GAC/BP,GAASA,EAAQC,KACpB,CAACE,EAAgBH,EAASO,EAAQN,IAQrC,OANAU,qBAAU,WACJT,IAAgBD,GAAOE,GACzBA,EAAeI,KAEhB,CAACJ,EAAgBD,EAAaK,EAAQN,IAGvC,sBACEW,IAAKL,EACLM,IAAKA,YAAG,6QAIJX,IAAgBD,EAAM,QAAU,mBAAkB,IAClDG,EAAU,oBAAwB,IAClCF,IAAgBD,EAAG,2BAA+B,IAAKG,EACrDU,gBAAcC,WACdC,iBAAeD,WAAU,KAE/Bf,QAASS,GAERR,K,kCCnCQ,SAASgB,EAA4BC,EAASC,GAK3D,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAEtBF,EAAQC,IAAMA,EACPD,EALT,mC,uLCKiC,+iBAyClBG,EAvCA,SAAH,GAAuC,IAAjCC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAmBjC,OACE,8BACE,mBAAKX,IAAG,GACN,mBAAKA,IAAG,GACN,YAAC,IAAe,CAACA,IAAG,IACpB,qBACEA,IAAG,EACHY,YAAa,SACbH,MAAOA,EACPC,SAAUA,EACVG,WA5BU,SAACC,GACL,UAAVA,EAAEC,KACJD,EAAEE,OAAOC,QA2BHC,OAvBS,SAACJ,GAAO,IAGc,EAAnCK,IAAYC,SAAST,EAASU,MADhCC,MAASA,EAAK,EAALA,MAAOlC,EAAG,EAAHA,IAEdkC,IAAUb,EAAMc,SACdnC,GAAe,QAARA,EACToC,mBAAS,UAAUf,EAAMc,OAAM,QAAQnC,GAEvCoC,mBAAS,UAAUf,EAAMc,aAkBzB,YAACE,EAAA,EAAO,CAACC,OAAK,O,wBC9BhBC,EAAO,kIAEE,sBAAyB,IAAtBC,EAAI,EAAJA,KAAMjB,EAAQ,EAARA,SAChBkB,EAAQD,EAAKE,kBAAkBC,MAAQH,EAAKE,kBAAkBC,MAAQ,GAAE,EAEpDC,mBAAS,CACjCV,MAAO,GACPlC,IAAK,MACL6C,aAAc,GACdC,KAAM,KAJDC,EAAK,KAAEC,EAAQ,KAoChBC,EAAaxC,uBACjB,SAACyB,EAAOlC,GACN,GAAqB,KAAjBkC,EAAMC,OAAV,CAUA,IAAMU,EAAeJ,EAAMS,QAAO,SAACC,GACjC,IAAMC,EAAclB,EAAMmB,cAAclB,OAAM,EAI1CgB,EAAKG,KAFPC,EAAO,EAAPA,QAAQ,EAAD,EACPC,YAAeC,EAAK,EAALA,MAAOX,EAAI,EAAJA,KAExB,OACGS,GAAWA,EAAQF,cAAcK,SAASN,IAC1CK,GAASA,EAAMJ,cAAcK,SAASN,IACtCN,GAAQA,EAAKY,SAASN,MAiB3BJ,GAAS,WACP,IAAMW,EAdW,SAACd,GAClB,IAAIe,EAAS,GACbf,EAAagB,KACX,gBAAGP,EAAI,EAAJA,KAAI,OAAQM,EAAM,sBAAOA,GAAM,YAAKN,EAAKE,YAAYV,UAE1D,IAAK,IAAIgB,EAAI,EAAGA,EAAIF,EAAOG,SAAUD,EACnC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIJ,EAAOG,SAAUC,EACnCJ,EAAOE,KAAOF,EAAOI,IAAIJ,EAAOK,OAAOD,IAAK,GAGpD,OAAOJ,EAIUM,CAAWrB,GAC5B,MAAO,CACL7C,IAAKA,EACLkC,MAAOA,EACPW,aAAcA,EACdC,KAAMa,WAzCRX,EAAS,CACPd,QACAlC,MACA6C,aAAc,GACdC,KAAM,OAyCZ,CAACL,IAYH,OATA/B,qBAAU,WACR,GAAIa,EAASU,KAAM,CAAC,IAGqB,EAAnCF,IAAYC,SAAST,EAASU,MADhCC,MAASA,EAAK,EAALA,MAAOlC,EAAG,EAAHA,IAElBiD,EAAWf,GAAgB,GAAIlC,GAAY,UAE5C,CAACiD,EAAY1B,EAASU,OAGvB,YAACkC,EAAA,EAAM,KACL,YAAC,IAAG,CAACV,MAAM,WACX,YAAClB,EAAO,KACN,YAAC,EAAM,CACLlB,MAAO0B,EAAMb,MACbZ,SAAU,SAACI,GA7EE,IAACQ,KA6EgBR,EAAEE,OAAOP,OA5EnCc,SAAWY,EAAMb,MAAMC,OAOjCc,EAAWf,EAAO,OANhBc,EAAS,OAAD,UACHD,EAAM,CACTb,YA0EEX,SAAUA,IAEZ,YAAC6C,EAAA,EAAW,CAACtB,KAAMC,EAAMD,KAAMuB,WAlGlB,SAACrE,GAClBgD,GAAS,SAACsB,GACR,IAAMzB,EAAeyB,EAAKzB,aAAaK,QAAO,SAACC,GAAU,IAAD,EAIlDA,EAAKG,KAFPC,EAAO,EAAPA,QAAQ,EAAD,EACPC,YAAeC,EAAK,EAALA,MAEjB,OAF4B,EAAJX,KAEfY,SAAS1D,GAAcuD,GAAWA,GAAaE,GAASA,EAC1D,MAET,OAAO,OAAP,UACKa,EAAK,CACRtE,IAAKA,EACL6C,aAAcA,QAqFyCE,MAAOA,IAC7DA,EAAMF,aAAagB,KAAI,SAACV,EAAMoB,GAAK,OAClC,YAACC,EAAA,EAAI,CAACrB,KAAMA,EAAMxB,IAAG,QAAU4C,W,2GCvE1BlC,IA9CC,SAAH,GAA0C,IAApCoC,EAAQ,EAARA,SAAUnC,EAAK,EAALA,MAAOoC,EAAM,EAANA,OAAQC,EAAG,EAAHA,IAClCxE,EAAeC,qBAAWC,KAA1BF,WACR,OACE,8BACE,mBACES,IACE6D,EACI,CAAC,CAAD,sDAAiCC,GAAM,4CACvC,CAAC,CAAD,wCAA0BA,GAAM,6CAGtC,mBACE9D,IAAG,YAAE,CAAC,CAAD,uBAEH+D,EACIF,EAAQ,qGAGRA,EAAQ,6FAGZtE,EAAU,yJACVmC,GACE1B,YAAG,+BAEG6D,EAAW,MAAQ,MAAK,OACxBtE,EACEU,gBAAc+D,WACd,IACA/D,gBAAcgE,WACd,IACAhE,gBAAciE,WACd/D,iBAAe6D,WACf,IACA7D,iBAAe8D,WACf,IACA9D,iBAAe+D,WAAU,QAGpC,U,kCC5CX,sCAeeC,IAZF,SAAH,GAA6D,IAAvDjC,EAAI,EAAJA,KAAM/C,EAAO,EAAPA,QAAcE,EAAW,EAAhBD,IAAkBE,EAAc,EAAdA,eAC/C,OAAO4C,EAAKe,KAAI,SAAC7D,EAAKuE,GAAK,OACzB,YAAC,IAAG,CACFvE,IAAKA,EACLC,YAAaA,EACbC,eAAgBA,EAChByB,IAAG,OAAS4C,EACZxE,QAASA","file":"component---src-pages-search-js-b295ca9f4794236d43d8.js","sourcesContent":["import React, { useContext, useRef, useEffect, useCallback } from \"react\"\nimport tw, { css } from \"twin.macro\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\n\nconst Tag = ({ onClick, tag, selectedTag, scrollToCenter }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  const tabRef = useRef(null)\n\n  const handleClick = useCallback(() => {\n    if (scrollToCenter) scrollToCenter(tabRef)\n    if (onClick) onClick(tag)\n  }, [scrollToCenter, onClick, tabRef, tag])\n\n  useEffect(() => {\n    if (selectedTag === tag && scrollToCenter) {\n      scrollToCenter(tabRef)\n    }\n  }, [scrollToCenter, selectedTag, tabRef, tag])\n\n  return (\n    <button\n      ref={tabRef}\n      css={css`\n        white-space: nowrap;\n        transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        ${tw`text-base font-bold rounded-full mr-2 my-1 py-1 px-3`}\n        ${selectedTag === tag ? \"color\" : \"background-color\"}:\n        ${isDarkMode ? `#2d3748` : `#edf2f7`};\n        ${selectedTag === tag ? `background-color` : `color`}: ${isDarkMode\n          ? darkModeColor.textColor1\n          : whiteModeColor.textColor1};\n      `}\n      onClick={handleClick}\n    >\n      {tag}\n    </button>\n  )\n}\n\nexport default Tag\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}","import React from \"react\"\nimport tw from \"twin.macro\"\nimport queryString from \"query-string\"\nimport { AiOutlineSearch } from \"react-icons/ai\"\nimport Divider from \"./Divider\"\nimport { navigate } from \"gatsby\"\n\nconst Search = ({ value, onChange, location }) => {\n  const handlePress = (e) => {\n    if (e.key === \"Enter\") {\n      e.target.blur()\n    }\n  }\n\n  const handleBlur = (e) => {\n    const {\n      query: { query, tag },\n    } = queryString.parseUrl(location.href)\n    if (query !== value.trim())\n      if (tag && tag !== \"ALL\") {\n        navigate(`?query=${value.trim()}&tag=${tag}`)\n      } else {\n        navigate(`?query=${value.trim()}`)\n      }\n  }\n\n  return (\n    <>\n      <div css={tw`my-4 p-4 w-full`}>\n        <div css={tw`flex mb-2`}>\n          <AiOutlineSearch css={tw`text-gray-500 my-auto w-8 h-8`} />\n          <input\n            css={tw`appearance-none focus:outline-none w-full ml-2 bg-transparent placeholder-gray-600`}\n            placeholder={\"search\"}\n            value={value}\n            onChange={onChange}\n            onKeyPress={handlePress}\n            onBlur={handleBlur}\n          />\n        </div>\n        <Divider color />\n      </div>\n    </>\n  )\n}\n\nexport default Search\n","import React, { useState, useEffect, useCallback } from \"react\"\nimport tw from \"twin.macro\"\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/Layout\"\nimport { graphql } from \"gatsby\"\nimport queryString from \"query-string\"\nimport Search from \"../components/Search\"\nimport Post from \"../components/Post\"\nimport TagSelector from \"../components/TagSelector\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges ? data.allMarkdownRemark.edges : []\n\n  const [state, setState] = useState({\n    query: \"\",\n    tag: \"ALL\",\n    filteredData: [],\n    tags: [],\n  })\n\n  const onTagClick = (tag) => {\n    setState((prev) => {\n      const filteredData = prev.filteredData.filter((post) => {\n        const {\n          excerpt,\n          frontmatter: { title, tags },\n        } = post.node\n        if (tags.includes(tag)) return (excerpt && excerpt) || (title && title)\n        return []\n      })\n      return {\n        ...prev,\n        tag: tag,\n        filteredData: filteredData,\n      }\n    })\n  }\n\n  const handleChange = (query) => {\n    if (query.trim() === state.query.trim()) {\n      setState({\n        ...state,\n        query,\n      })\n      return\n    }\n    searchPost(query, \"ALL\")\n  }\n\n  const searchPost = useCallback(\n    (query, tag) => {\n      if (query.trim() === \"\") {\n        setState({\n          query,\n          tag,\n          filteredData: [],\n          tags: [],\n        })\n        return\n      }\n\n      const filteredData = posts.filter((post) => {\n        const searchQuery = query.toLowerCase().trim()\n        const {\n          excerpt,\n          frontmatter: { title, tags },\n        } = post.node\n        return (\n          (excerpt && excerpt.toLowerCase().includes(searchQuery)) ||\n          (title && title.toLowerCase().includes(searchQuery)) ||\n          (tags && tags.includes(searchQuery))\n        )\n      })\n\n      const searchTags = (filteredData) => {\n        var result = []\n        filteredData.map(\n          ({ node }) => (result = [...result, ...node.frontmatter.tags])\n        )\n        for (var i = 0; i < result.length; ++i) {\n          for (var j = i + 1; j < result.length; ++j) {\n            if (result[i] === result[j]) result.splice(j--, 1)\n          }\n        }\n        return result\n      }\n\n      setState(() => {\n        const tagsData = searchTags(filteredData)\n        return {\n          tag: tag,\n          query: query,\n          filteredData: filteredData,\n          tags: tagsData,\n        }\n      })\n    },\n    [posts]\n  )\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { query, tag },\n      } = queryString.parseUrl(location.href)\n      searchPost(query ? query : \"\", tag ? tag : \"ALL\")\n    }\n  }, [searchPost, location.href])\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <Wrapper>\n        <Search\n          value={state.query}\n          onChange={(e) => handleChange(e.target.value)}\n          location={location}\n        />\n        <TagSelector tags={state.tags} onTagClick={onTagClick} state={state} />\n        {state.filteredData.map((post, index) => (\n          <Post post={post} key={`post_${index}`} />\n        ))}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"ddd, MMM D, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from \"react\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\nimport tw, { css } from \"twin.macro\"\n\nconst Divider = ({ vertical, color, margin, fat }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  return (\n    <>\n      <div\n        css={\n          vertical\n            ? [tw`h-full flex justify-center`, margin && tw`my-2`]\n            : [tw`flex justify-center`, margin && tw`mx-2`]\n        }\n      >\n        <div\n          css={[\n            tw`rounded-full`,\n            fat\n              ? vertical\n                ? tw`h-full w-1 my-auto`\n                : tw`w-full h-1`\n              : vertical\n              ? tw`h-full w-px my-auto`\n              : tw`w-full h-px`,\n            isDarkMode ? tw`bg-gray-800` : tw`bg-gray-100`,\n            color &&\n              css`\n                background: linear-gradient(\n                  ${vertical ? \"180\" : \"270\"}deg,\n                  ${isDarkMode\n                    ? darkModeColor.mainColor1 +\n                      \",\" +\n                      darkModeColor.mainColor2 +\n                      \",\" +\n                      darkModeColor.mainColor3\n                    : whiteModeColor.mainColor1 +\n                      \",\" +\n                      whiteModeColor.mainColor2 +\n                      \",\" +\n                      whiteModeColor.mainColor3}\n                );\n              `,\n          ]}\n        ></div>\n      </div>\n    </>\n  )\n}\n\nexport default Divider\n","import React from \"react\"\nimport Tag from \"./Tag\"\n\nconst Tags = ({ tags, onClick, tag: selectedTag, scrollToCenter }) => {\n  return tags.map((tag, index) => (\n    <Tag\n      tag={tag}\n      selectedTag={selectedTag}\n      scrollToCenter={scrollToCenter}\n      key={`tag_${index}`}\n      onClick={onClick}\n    />\n  ))\n}\n\nexport default Tags\n"],"sourceRoot":""}